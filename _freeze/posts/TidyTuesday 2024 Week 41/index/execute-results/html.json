{
  "hash": "0bc9fab9fec8e870159e654de2315788",
  "result": {
    "markdown": "---\ntitle: \"Create Calendar in R\"\nauthor: \"Ryan McManus\"\ndate: \"2023-10-21\"\ncategories: [R, function, code]\nimage: \"cover.png\"\n---\n\n\nOne of the most useful things you can create is a function to generate a calendar.\n\nNecessary packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages('timeDate')\nlibrary(conflicted)\nlibrary(timeDate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'timeDate' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyverse' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'stringr' was built under R version 4.3.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n```\n:::\n\n```{.r .cell-code}\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'DT' was built under R version 4.3.2\n```\n:::\n\n```{.r .cell-code}\nconflicted::conflict_prefer_all('tidyverse','stats')\n```\n:::\n\n\nIn the electric industry it's important to be able to summarize data by specific timing blocks. Below is a list of North American Electric Reliability Corporation (NERC) holidays.\n\nSelect the timezone you wish to report in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstartdate<-'2023-01-01'\nenddate<-'2024-02-01'\n#tz_select<-'America/Los_Angeles'\ntz_select<-'UTC'\n\n\nnerc_holidays<-as.Date(timeDate::holidayNERC(lubridate::year(lubridate::ymd(startdate)):lubridate::year(lubridate::ymd(enddate)),FinCenter=tz_select))%>%lubridate::force_tz()\n```\n:::\n\n\nCreate the hourly calendar...\n\nYou can get as creative with the timing periods as you need. Below is the general structure. Please notice the day-of-week (dow) has been changed so the week flows Monday to Sunday or 1 to 7 and hours are represented as hour-ending.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<-data.frame(start=lubridate::ymd_h(paste0(startdate,\"_0\"),tz=tz_select),end=lubridate::ymd_h(paste0(enddate,\"_0\")))%>%\n  dplyr::transmute(datetime=list(seq(min(start),max(end),by=\"hour\")))%>%\n  tidyr::unnest(datetime)%>%\n  dplyr::mutate(datetime=lubridate::force_tz(datetime,tz=tz_select))%>%\n  dplyr::mutate(\n    date=lubridate::force_tz(lubridate::as_date(datetime),tz=tz_select),\n    year=lubridate::year(datetime),\n    month=lubridate::month(datetime),\n    day=lubridate::day(datetime),\n    hour=lubridate::hour(datetime)+1,\n    dow=lubridate::wday(datetime,week_start = getOption(\"lubridate.week.start\",1)),\n    nerc_holiday=ifelse(date %in% nerc_holidays,1,0),\n    peak_day=ifelse(dplyr::between(dow,1,6) & nerc_holiday==0,1,0),\n    hlh=ifelse(dplyr::between(dow,1,6) & dplyr::between(hour,7,22) & nerc_holiday==0,1,0),\n    llh=1-hlh,\n    super=ifelse(dplyr::between(dow,1,5) & dplyr::between(hour,13,20) & nerc_holiday==0,1,0),\n    hlh_he13T22=ifelse(dplyr::between(dow,1,6) & dplyr::between(hour,13,22) & nerc_holiday==0,1,0),\n    llh_sun_holiday=ifelse(dow==7 | nerc_holiday==1,1,0)\n  )\n```\n:::\n\n\nLet's take a peak at the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>%head(50)%>%DT::datatable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b0e3b9d68ada0f81a4ca\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b0e3b9d68ada0f81a4ca\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\"],[\"2023-01-01T00:00:00Z\",\"2023-01-01T01:00:00Z\",\"2023-01-01T02:00:00Z\",\"2023-01-01T03:00:00Z\",\"2023-01-01T04:00:00Z\",\"2023-01-01T05:00:00Z\",\"2023-01-01T06:00:00Z\",\"2023-01-01T07:00:00Z\",\"2023-01-01T08:00:00Z\",\"2023-01-01T09:00:00Z\",\"2023-01-01T10:00:00Z\",\"2023-01-01T11:00:00Z\",\"2023-01-01T12:00:00Z\",\"2023-01-01T13:00:00Z\",\"2023-01-01T14:00:00Z\",\"2023-01-01T15:00:00Z\",\"2023-01-01T16:00:00Z\",\"2023-01-01T17:00:00Z\",\"2023-01-01T18:00:00Z\",\"2023-01-01T19:00:00Z\",\"2023-01-01T20:00:00Z\",\"2023-01-01T21:00:00Z\",\"2023-01-01T22:00:00Z\",\"2023-01-01T23:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T01:00:00Z\",\"2023-01-02T02:00:00Z\",\"2023-01-02T03:00:00Z\",\"2023-01-02T04:00:00Z\",\"2023-01-02T05:00:00Z\",\"2023-01-02T06:00:00Z\",\"2023-01-02T07:00:00Z\",\"2023-01-02T08:00:00Z\",\"2023-01-02T09:00:00Z\",\"2023-01-02T10:00:00Z\",\"2023-01-02T11:00:00Z\",\"2023-01-02T12:00:00Z\",\"2023-01-02T13:00:00Z\",\"2023-01-02T14:00:00Z\",\"2023-01-02T15:00:00Z\",\"2023-01-02T16:00:00Z\",\"2023-01-02T17:00:00Z\",\"2023-01-02T18:00:00Z\",\"2023-01-02T19:00:00Z\",\"2023-01-02T20:00:00Z\",\"2023-01-02T21:00:00Z\",\"2023-01-02T22:00:00Z\",\"2023-01-02T23:00:00Z\",\"2023-01-03T00:00:00Z\",\"2023-01-03T01:00:00Z\"],[\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-01T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-02T00:00:00Z\",\"2023-01-03T00:00:00Z\",\"2023-01-03T00:00:00Z\"],[2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,2],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>datetime<\\/th>\\n      <th>date<\\/th>\\n      <th>year<\\/th>\\n      <th>month<\\/th>\\n      <th>day<\\/th>\\n      <th>hour<\\/th>\\n      <th>dow<\\/th>\\n      <th>nerc_holiday<\\/th>\\n      <th>peak_day<\\/th>\\n      <th>hlh<\\/th>\\n      <th>llh<\\/th>\\n      <th>super<\\/th>\\n      <th>hlh_he13T22<\\/th>\\n      <th>llh_sun_holiday<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5,6,7,8,9,10,11,12,13,14]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"datetime\",\"targets\":1},{\"name\":\"date\",\"targets\":2},{\"name\":\"year\",\"targets\":3},{\"name\":\"month\",\"targets\":4},{\"name\":\"day\",\"targets\":5},{\"name\":\"hour\",\"targets\":6},{\"name\":\"dow\",\"targets\":7},{\"name\":\"nerc_holiday\",\"targets\":8},{\"name\":\"peak_day\",\"targets\":9},{\"name\":\"hlh\",\"targets\":10},{\"name\":\"llh\",\"targets\":11},{\"name\":\"super\",\"targets\":12},{\"name\":\"hlh_he13T22\",\"targets\":13},{\"name\":\"llh_sun_holiday\",\"targets\":14}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nWe need to double check our results. I refer to [Energy GPS Power Calendar](https://www.energygps.com/HomeTools/PowerCalendar \"Power Calendar\"). Below is a quick screenshot for reference.\n\n![](energy_gps_screenshot.png){fig-align=\"center\"}\n\nWe need to roll-up our results for comparison.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>%\n  dplyr::summarise(dplyr::across(nerc_holiday:llh_sun_holiday,~sum(.)),month_date=max(lubridate::floor_date(date,'month')),.by = c(year,month))%>%\n  mutate(days_in_month=lubridate::days_in_month(month_date),flat=days_in_month*24,peak_day=peak_day/24,nerc_holiday=nerc_holiday/24,.after = peak_day)%>%\n  select(month_date,year,month,flat,hlh,llh,llh_sun_holiday,peak_day,days_in_month,nerc_holiday)%>%\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-36569d78600ec0e56b3d\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-36569d78600ec0e56b3d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\"],[\"2023-01-01T00:00:00Z\",\"2023-02-01T00:00:00Z\",\"2023-03-01T00:00:00Z\",\"2023-04-01T00:00:00Z\",\"2023-05-01T00:00:00Z\",\"2023-06-01T00:00:00Z\",\"2023-07-01T00:00:00Z\",\"2023-08-01T00:00:00Z\",\"2023-09-01T00:00:00Z\",\"2023-10-01T00:00:00Z\",\"2023-11-01T00:00:00Z\",\"2023-12-01T00:00:00Z\",\"2024-01-01T00:00:00Z\",\"2024-02-01T00:00:00Z\"],[2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2023,2024,2024],[1,2,3,4,5,6,7,8,9,10,11,12,1,2],[744,672,744,720,744,720,744,744,720,744,720,744,744,696],[400,384,432,400,416,416,400,432,400,416,400,400,416,0],[344,288,312,320,328,304,344,312,320,328,320,344,328,1],[144,96,96,120,120,96,144,96,120,120,120,144,120,0],[25,24,27,25,26,26,25,27,25,26,25,25,26,0.04166666666666666],[31,28,31,30,31,30,31,31,30,31,30,31,31,29],[1,0,0,0,1,0,1,0,1,0,1,1,1,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>month_date<\\/th>\\n      <th>year<\\/th>\\n      <th>month<\\/th>\\n      <th>flat<\\/th>\\n      <th>hlh<\\/th>\\n      <th>llh<\\/th>\\n      <th>llh_sun_holiday<\\/th>\\n      <th>peak_day<\\/th>\\n      <th>days_in_month<\\/th>\\n      <th>nerc_holiday<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6,7,8,9,10]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"month_date\",\"targets\":1},{\"name\":\"year\",\"targets\":2},{\"name\":\"month\",\"targets\":3},{\"name\":\"flat\",\"targets\":4},{\"name\":\"hlh\",\"targets\":5},{\"name\":\"llh\",\"targets\":6},{\"name\":\"llh_sun_holiday\",\"targets\":7},{\"name\":\"peak_day\",\"targets\":8},{\"name\":\"days_in_month\",\"targets\":9},{\"name\":\"nerc_holiday\",\"targets\":10}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nLooks good to me!\n\nBoom. Now you have a NERC calendar you can use in R or drop it to a flat file or a SQL table for different uses. Before we end this, let's do one more step to make this calendar infinitely more useful. Let's create a calendar function!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalendar<-function(startdate,enddate,tz_select='UTC',granularity='hour'){\n\n  nerc_holidays<-as.Date(timeDate::holidayNERC(lubridate::year(lubridate::ymd(startdate)):lubridate::year(lubridate::ymd(enddate)),FinCenter=tz_select))%>%lubridate::force_tz()\n  \n  df<-data.frame(start=lubridate::ymd_h(paste0(startdate,\"_0\"),tz=tz_select),end=lubridate::ymd_h(paste0(enddate,\"_0\")))%>%\n  dplyr::transmute(datetime=list(seq(min(start),max(end),by=\"hour\")))%>%\n  tidyr::unnest(datetime)%>%\n  dplyr::mutate(datetime=lubridate::force_tz(datetime,tz=tz_select))%>%\n  dplyr::mutate(\n    date=lubridate::force_tz(lubridate::as_date(datetime),tz=tz_select),\n    year=lubridate::year(datetime),\n    month=lubridate::month(datetime),\n    day=lubridate::day(datetime),\n    hour=lubridate::hour(datetime)+1,\n    dow=lubridate::wday(datetime,week_start = getOption(\"lubridate.week.start\",1)),\n    nerc_holiday=ifelse(date %in% nerc_holidays,1,0),\n    peak_day=ifelse(dplyr::between(dow,1,6) & nerc_holiday==0,1,0),\n    hlh=ifelse(dplyr::between(dow,1,6) & dplyr::between(hour,7,22) & nerc_holiday==0,1,0),\n    llh=1-hlh,\n    super=ifelse(dplyr::between(dow,1,5) & dplyr::between(hour,13,20) & nerc_holiday==0,1,0),\n    hlh_he13T22=ifelse(dplyr::between(dow,1,6) & dplyr::between(hour,13,22) & nerc_holiday==0,1,0),\n    llh_sun_holiday=ifelse(dow==7 | nerc_holiday==1,1,0)\n  )\n  \n  if(granularity=='month'){\n    df<-df%>%dplyr::summarise(dplyr::across(nerc_holiday:llh_sun_holiday,~sum(.)),month_date=max(lubridate::floor_date(date,'month')),.by = c(year,month))%>%\n      mutate(days_in_month=lubridate::days_in_month(month_date),flat=days_in_month*24,peak_day=peak_day/24,nerc_holiday=nerc_holiday/24,.after = peak_day)%>%\n      select(month_date,everything())\n  }\n  \n  return(df)\n  \n}\n```\n:::\n\n\nTake the new function for a spin...\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalendar('2022-01-01','2023-01-01',granularity = 'month')%>%DT::datatable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-0111bf260c2193929f25\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0111bf260c2193929f25\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\"],[\"2022-01-01T00:00:00Z\",\"2022-02-01T00:00:00Z\",\"2022-03-01T00:00:00Z\",\"2022-04-01T00:00:00Z\",\"2022-05-01T00:00:00Z\",\"2022-06-01T00:00:00Z\",\"2022-07-01T00:00:00Z\",\"2022-08-01T00:00:00Z\",\"2022-09-01T00:00:00Z\",\"2022-10-01T00:00:00Z\",\"2022-11-01T00:00:00Z\",\"2022-12-01T00:00:00Z\",\"2023-01-01T00:00:00Z\"],[2022,2022,2022,2022,2022,2022,2022,2022,2022,2022,2022,2022,2023],[1,2,3,4,5,6,7,8,9,10,11,12,1],[1,0,0,0,1,0,1,0,1,0,1,1,0],[25,24,27,26,25,26,25,27,25,26,25,26,0],[31,28,31,30,31,30,31,31,30,31,30,31,31],[744,672,744,720,744,720,744,744,720,744,720,744,744],[400,384,432,416,400,416,400,432,400,416,400,416,0],[344,288,312,304,344,304,344,312,320,328,320,328,1],[168,160,184,168,168,176,160,184,168,168,168,168,0],[250,240,270,260,250,260,250,270,250,260,250,260,0],[144,96,96,96,144,96,144,96,120,120,120,120,1]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>month_date<\\/th>\\n      <th>year<\\/th>\\n      <th>month<\\/th>\\n      <th>nerc_holiday<\\/th>\\n      <th>peak_day<\\/th>\\n      <th>days_in_month<\\/th>\\n      <th>flat<\\/th>\\n      <th>hlh<\\/th>\\n      <th>llh<\\/th>\\n      <th>super<\\/th>\\n      <th>hlh_he13T22<\\/th>\\n      <th>llh_sun_holiday<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,4,5,6,7,8,9,10,11,12]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"month_date\",\"targets\":1},{\"name\":\"year\",\"targets\":2},{\"name\":\"month\",\"targets\":3},{\"name\":\"nerc_holiday\",\"targets\":4},{\"name\":\"peak_day\",\"targets\":5},{\"name\":\"days_in_month\",\"targets\":6},{\"name\":\"flat\",\"targets\":7},{\"name\":\"hlh\",\"targets\":8},{\"name\":\"llh\",\"targets\":9},{\"name\":\"super\",\"targets\":10},{\"name\":\"hlh_he13T22\",\"targets\":11},{\"name\":\"llh_sun_holiday\",\"targets\":12}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}