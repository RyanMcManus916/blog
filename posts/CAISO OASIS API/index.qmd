---
title: "CAISO OASIS API"
author: "Ryan McManus"
date: "2023-11-01"
categories: [R, function, code]
image: "cover.png"
---

For this post we'll walk through creating an API function for downloading CAISO OASIS data through their supported API. I will be referencing the [Interface Specification for OASIS](https://www.caiso.com/Documents/OASISAPISpecification.pdf "API Doc"). This document walks you through how to query the back-end system to extract a variety of data. Today we'll be looking to get access to their day-ahead, fifteen minute, and real-time markets.

I will be using the single reports, as described in section 2.1. The basic format goes as followed:

`URL?queryname=&startdate=&enddate=&market_run_id=&varParameters`

Updated info --https://www.caiso.com/Documents/OASIS-Frequently-Asked-Questions.pdf

Assemble our variables...

Let's setup the initial variables for the query.

```{r}
library(tidyverse)
library(httr)
library(XML)

startdate<-'2023-01-15'
enddate<-'2023-01-30'
market_run_id<-'RTM'
api_version<-2
queryname<-'PRC_INTVL_LMP'
nodes<-c('TH_NP15_GEN-APND','TH_SP15_GEN-APND')
```

This API requires a string of nodes be provided to the call. The function below will concatenate our vector string of nodes.

```{r}
concat_nodes<-function(x){if(length(x)>1){
 output=paste(x,collapse=",") 
}else{output=x}
  return(output)}

concat_nodes(nodes)
nodes<-concat_nodes(nodes)
```

The CAISO API requires an ISOFormat for its date input. The function below takes a more common R format and converts it to the necessary ISO format. It should be noted that the minimum query length is one day. If querying part days is necessary then this function could be altered to include a datetime "hour".

```{r}
caisodatefmt<-function(x){URLencode(format(lubridate::ymd(as.character(x),tz="America/Los_Angeles"),"%Y%m%dT07:00-0000"),reserved = TRUE)}
isostartdate<-caisodatefmt(startdate)
isoenddate<-caisodatefmt(enddate)

```

This code section will be used to save the zipped file name. This will be important because we will be creating a loop to drop multiple files into our temp folder for extraction.

``` r
str(response$headers$`content-disposition`)
content_disposition<-response$headers$`content-disposition`
 filename <- sub("^.*filename=\"?([^;\"]+)\"?.*$", "\\1", content_disposition)
```

If you'd like you can delete the temp folder then all calculations are complete. This part has been removed in the final API because it can only be called once per R session.

``` r
unlink(temp_dir, recursive = TRUE)
```

The script below is a sample that takes a date range and a desired length of days and creates a range between the start and end dates.

```{r}

library(lubridate)

s <- ymd('2022-01-01')
e <- ymd('2023-01-01')
day_chunk<-30

while (s <= e) {
  e_tmp <- s + days(day_chunk)
  if (e_tmp > e) {
    e_tmp <- e
  }
  print(paste("Start Date:", s, "End Date:", e_tmp))
  s <- e_tmp + days(1)
}

```

The API call below is where the rubber meets the road. This script is doing three key things.

1.  Its querying the CAISO API and returning a response.

2.  Its saving the returned zipped XML file to a temporary file.

3.  Its unzipping the downloaded XML file and loading it to a dataframe.

If it seems like a lot, it's because it is...

This query is looking for an XML file, which is CAISO's preferred format. There is an option for a zipped CSV file. Simply add `resultformat=6` to the params list.

Each query has a different maximum date length you can request. This depends on the granularity of the data being requested. Since we will probably need more than \~30days of data we will need to implement a loop into our query.

``` r
startdate<-'2023-01-01' #Date string in format %Y-%m-%d
enddate<-'2023-01-31' #Date string in format %Y-%m-%d
query<-'DAM' # one of Day Ahead='DAM', 15Min Market='FMM', Real Time='RTM'
day_chunk<-30 # Default is 30days, but can be adjusted
```

```{r}


library(tidyverse)
library(httr)
library(XML)
library(xml2)

caiso_prices<-function(startdate,enddate,query,nodes,day_chunk=30){

  concat_nodes<-function(x){if(length(x)>1){
   output=paste(x,collapse=",") 
  }else{output=x}
    return(output)}
  
  nodes<-concat_nodes(nodes)
  
  startdate<-ymd(startdate)
  enddate<-ymd(enddate)
  
  df_output<-data.frame() #Dataframe to store all looped dataframes
  
  # If statement to assign API specific variables
  if(query=='DAM'){
    queryname<-'PRC_LMP'
    api_version<-12
    market_run_id<-'DAM'
  }else if(query=='RTM'){
    queryname<-'PRC_INTVL_LMP'
    api_version<-2
    market_run_id<-'RTM'
  }else if(query=='FMM'){
    queryname<-'PRC_RTPD_LMP'
    api_version<-3
    market_run_id<-'RTPD'
  }else{
    api_version<-1
    market_run_id<-'DAM'
  }
  
  # Loop over desired date ranges
  while (startdate <= enddate) {
    e_tmp <- startdate + days(day_chunk)
    if (e_tmp > enddate) {
      e_tmp <- enddate
    }
  # Convert dates to CAISO preferred format
      caisodatefmt<-function(x){(format(lubridate::ymd(as.character(x),tz="America/Los_Angeles"),"%Y%m%dT07:00-0000"))}
      isostartdate<-caisodatefmt(startdate)
      isoenddate<-caisodatefmt(e_tmp)
      
      endpoint <- 'http://oasis.caiso.com/oasisapi/SingleZip'
      
      # Define the parameters for the data you want to retrieve
      params <- list(
       # "resultformat"=6,
        "queryname" = queryname, # Query Name
        "version" = api_version, # API version
        "startdatetime" = isostartdate,  # Start date and time
        "enddatetime" = isoenddate,    # End date and time
        "market_run_id" = market_run_id,  # Desired Market
        "node" = nodes # Concatenated list of nodes
      )
      
      # Make the API request with parameters
      full_url<-URLdecode(modify_url(endpoint, query = params)) # This is here to make sure the ":" render correctly
      response <- GET(full_url)
      
      
      # Check if the request was successful (status code 200)
      if (response$status_code == 200) {
        #Create and store zipped file
        temp_dir<-tempdir()
        content_disposition<-response$headers$`content-disposition`
        filename <- sub("^.*filename=\"?([^;\"]+)\"?.*$", "\\1", content_disposition)
        temp_zip_file <- paste0(temp_dir, "\\", filename)
       
        zipped<-writeBin(content(response,as='raw'),temp_zip_file)
        unzip(temp_zip_file,exdir=temp_dir)
        extracted_files <- list.files(temp_dir)
        
        data_file<-file.path(temp_dir,paste0(tools::file_path_sans_ext(filename),'.xml')) # Specific file pulled. Temp folder may have many.
        # Parse XML
        xml_doc <- xmlParse(data_file)
        root_element <- xmlRoot(xml_doc)
        
        # Get the namespace URI
        namespace_uri <- xmlNamespace(root_element)
        
        # Define the namespace prefix and URI
        namespace_prefix <- "ns"
        namespace_uri <- namespace_uri[[1]]
        
        # Find all <REPORT_DATA> elements with the namespace
        report_data_nodes <- getNodeSet(xml_doc, "//ns:REPORT_DATA", namespaces = c(ns = namespace_uri))
        
        # Convert the XML data to a data frame
        df <- xmlToDataFrame(report_data_nodes)
        
        df_output<-bind_rows(df_output,df) #combine all results 
        
      } else {
        stop("API request was not successful.")
      }
    print(paste('Range start:',startdate,' end:',e_tmp))
    startdate <- e_tmp + days(1) # Increment loop by 1 day
    Sys.sleep(5) #Sleep so you dont ping the server to death
    } #end of while loop
  #unlink(temp_dir, recursive = TRUE) # Currently not used
  
  #Convert the GMT or UTC times to the local timezone. 
  df_output<-df_output%>%
    mutate(
      START_DATETIME=with_tz(as.POSIXct(INTERVAL_START_GMT, "%Y-%m-%dT%H:%M:%S", tz="UTC"),tzone="America/Los_Angeles"),
           END_DATETIME=with_tz(as.POSIXct(INTERVAL_END_GMT, "%Y-%m-%dT%H:%M:%S", tz="UTC"),tzone="America/Los_Angeles"),.after=INTERVAL_END_GMT)
  return(df_output) # Final output to return
}#end of function
```

Take our new function for a spin...

```{r}
startdate<-'2023-01-15'
enddate<-'2023-01-16'
query<-'RTM' 
nodes<-c('TH_NP15_GEN-APND','TH_SP15_GEN-APND')

result<-caiso_prices(startdate = startdate,enddate=enddate,query = query,nodes = nodes)

result%>%head(10)

```
