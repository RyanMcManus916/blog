---
title: "TidyTuesday 2024 Week 41"
author: "Ryan McManus"
date: "2024-10-13"
slug: "tidytuesday-2024-week-41"
categories: [R, function, code,Shiny]
image: "cover.png"
---

## Introduction

Here's my first try at #TidyTuesday. The project pairs the TidyTuesday dataset from Week 41 with Shiny and shows each species with its image and a short description from Wikipedia.

Try it out here: [NPS TidyTuesday Shiny App](https://ryanmcmanus916.shinyapps.io/tidytues/)

## Source Data

```{r}
#| warning: false
#| error: false


library(WikipediR)
library(rvest)
library(tidyverse)
library(imager)
library(tidytuesdayR)


#tuesdata <- tidytuesdayR::tt_load(2024, week = 41)
#most_visited_nps_species_data <- tuesdata$most_visited_nps_species_data
#rm(tuesdata)

most_visited_nps_species_data<-read.csv('most_visited_nps_species_data.csv')

wikipedia_search<-function(search_word){
    # Get Wikipedia Meta Data
    meta<-WikipediR::page_info("en","wikipedia",page=search_word,clean_response=T)
    url<-meta[[1]]$fullurl
    wikipage<-rvest::session(url)
    
    # Get Image URL
    imginfo<-wikipage|>rvest::html_nodes("tr:nth-child(2) img")
    img_url<-imginfo[1]|>rvest::html_attr("src")
    img_url<-paste0('https:',img_url)
    img<-imager::load.image(img_url) #plot(axes=FALSE)
    
    # Get Intro paragraph
    wikitext<-readBin(wikipage$response$content, what = "text")
    body_text<-rvest::read_html(wikitext)|>rvest::html_elements('p')|>rvest::html_text(trim = T)
    page<-rvest::read_html(wikitext)
    nodes<- rvest::html_nodes(page,xpath='//*')
    
    h1_index<- which(rvest::html_name(nodes)=='h1')
    h2_index<- which(rvest::html_name(nodes)=='h2')[2]
    
    paragraph_contents<-''
    
    if(length(h1_index)>0 && length(h2_index)>0) {
        paragraphs_between<- nodes[(h1_index+1):(h2_index-1)]
        paragraphs<- paragraphs_between[rvest::html_name(paragraphs_between)=='p']
        paragraphs_text<- rvest::html_text(paragraphs) #[-c(1:2)])
        paragraphs_text<-gsub('\n','',paragraphs_text)
        paragraph_contents<-paste(paragraphs_text,collapse = '\n\n')
    }
    return(list('text'=paragraph_contents,'image'=img, 'image_url' =img_url))
    
}
```

## Shiny App

```{r}
#| warning: false
#| error: false


library(shiny)
library(bslib)

source("tidyTues_source.R")

df<-most_visited_nps_species_data
df<-df|>select(ParkName,CommonNames,SciName)|>distinct(ParkName,CommonNames,SciName)
np<-unique(df$ParkName)

# Define UI for application that draws a histogram
ui <- fluidPage(
    
    theme = bs_theme(version = 5, bootswatch = "flatly"),
  
    # Application title
    titlePanel("TidyTuesday - National Parks Species"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            selectInput("np_select",
                        "National Park:",
                        choices = np,
                        selected = 1),
            selectInput("a_select", "Common Name:",
                        choices = NULL),
            actionButton("button","Show")
        ),

        # Show a plot of the generated distribution
        mainPanel(
           uiOutput("intro_text"),
           card(
             card_header("Image of Species"),
             #plotOutput("main_plot")
             uiOutput("image_url")
             ),
           card(
             card_header("Wikipedia Description"),
             uiOutput("text_output")
           )
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output,session) {

  choices<-reactive({
     req(input$np_select)
     df_list<-df|>
       filter(ParkName==input$np_select)|>
       na.omit()|>
       select(CommonNames,SciName)|>
       arrange(CommonNames)
     
      setNames(as.list(df_list$SciName), df_list$CommonNames)
   })
  
  observe({
    updateSelectInput(session, "a_select", choices = choices(),selected = NULL)
  })
  
  wikidata<-eventReactive(input$button,{
    wikipedia_search(input$a_select)
  })
  
  output$image_url<-renderUI({
    img(wikidata()$image_url,width='100%')
  })
  
  output$main_plot<-renderPlot({
    wikidata()$image|>plot(axes=FALSE)
  })
  
  output$text_output<-renderUI({
    text<-wikidata()$text
    HTML(text)
  })
  
  output$intro_text<- renderUI({
    HTML("<h2>Welcome!</h2> 
         <p>This Shiny App corresponds with #TidyTuesday 2024 Week 41.</p>
         <p>This App uses the WikipediR library to search for the species scientific name on Wikipedia.</p>
         <p>If the name exists a small picture and the intro paragraphs are returned.</p>"
    )
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)


```
