---
title: "TidyTuesday 2024 Week 41"
author: "Ryan McManus"
date: "2024-10-13"
categories: [R, function, code,Shiny]
---

One of the most useful things you can create is a function to generate a calendar.

Necessary packages

```{r}

library(shiny)
library(bslib)

source("tidyTues_source.R")

df<-most_visited_nps_species_data
df<-df|>select(ParkName,CommonNames,SciName)|>distinct(ParkName,CommonNames,SciName)
np<-unique(df$ParkName)

# Define UI for application that draws a histogram
ui <- fluidPage(
    
    theme = bs_theme(version = 5, bootswatch = "flatly"),
  
    # Application title
    titlePanel("TidyTuesday - National Parks Species"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            selectInput("np_select",
                        "National Park:",
                        choices = np,
                        selected = 1),
            selectInput("a_select", "Common Name:",
                        choices = NULL),
            actionButton("button","Show")
        ),

        # Show a plot of the generated distribution
        mainPanel(
           uiOutput("intro_text"),
           card(
             card_header("Image of Species"),
             plotOutput("main_plot")
             ),
           card(
             card_header("Wikipedia Description"),
             uiOutput("text_output")
           )
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output,session) {

  choices<-reactive({
     req(input$np_select)
     df_list<-df|>
       filter(ParkName==input$np_select)|>
       na.omit()|>
       select(CommonNames,SciName)|>
       arrange(CommonNames)
     
      setNames(as.list(df_list$SciName), df_list$CommonNames)
   })
  
  observe({
    updateSelectInput(session, "a_select", choices = choices(),selected = NULL)
  })
  
  wikidata<-eventReactive(input$button,{
    wikipedia_search(input$a_select)
  })
  
  output$main_plot<-renderPlot({
    wikidata()$image|>plot(axes=FALSE)
  })
  
  output$text_output<-renderUI({
    text<-wikidata()$text
    HTML(text)
  })
  
  output$intro_text<- renderUI({
    HTML("<h2>Welcome!</h2> 
         <p>This Shiny App corresponds with #TidyTuesday 2024 Week 41.</p>
         <p>This App uses the WikipediR library to search for the species scientific name on Wikipedia.</p>
         <p>If the name exists a small picture and the intro paragraphs are returned.</p>"
    )
  })
  
}

# Run the application 
shinyApp(ui = ui, server = server)


```
